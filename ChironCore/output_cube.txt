Chiron v5.3

    ░█████╗░██╗░░██╗██╗██████╗░░█████╗░███╗░░██╗
    ██╔══██╗██║░░██║██║██╔══██╗██╔══██╗████╗░██║
    ██║░░╚═╝███████║██║██████╔╝██║░░██║██╔██╗██║
    ██║░░██╗██╔══██║██║██╔══██╗██║░░██║██║╚████║
    ╚█████╔╝██║░░██║██║██║░░██║╚█████╔╝██║░╚███║
    ░╚════╝░╚═╝░░╚═╝╚═╝╚═╝░░╚═╝░╚════╝░╚═╝░░╚══╝
    
assume(1==1)
:c1 = :a*:a*:a - 3*:a*:a*:b - 3*:a*:b*:b + :b*:b*:b
:c2 = (:a-:b)*(:a-:b)*(:a-:b)
assert(:c1 == :c2)
assume(1==1)
:c1 = :a*:a*:a - 3*:a*:a*:b - 3*:a*:b*:b + :b*:b*:b
:c2 = (:a-:b)*(:a-:b)*(:a-:b)
assert(:c1 == :c2)
{<cfg.ChironCFG.BasicBlock object at 0x7fb6d7a13ad0>: {':a_0': 0, ':b_0': 0, ':c1_0': 1, ':c2_0': 1}}
['((1 == 1))', ':c1_0_1=(((((:a_0_0 * :a_0_0) * :a_0_0) - (((3 * :a_0_0) * :a_0_0) * :b_0_0)) - (((3 * :a_0_0) * :b_0_0) * :b_0_0)) + ((:b_0_0 * :b_0_0) * :b_0_0))', ':c2_0_1=(((:a_0_0 - :b_0_0) * (:a_0_0 - :b_0_0)) * (:a_0_0 - :b_0_0))', '((:c1_0_1 == :c2_0_1))']
['((:c1_0_1 == :c2_0_1))']
[['assign', [':c1_0_1=(((((:a_0_0 * :a_0_0) * :a_0_0) - (((3 * :a_0_0) * :a_0_0) * :b_0_0)) - (((3 * :a_0_0) * :b_0_0) * :b_0_0)) + ((:b_0_0 * :b_0_0) * :b_0_0))', ':c2_0_1=(((:a_0_0 - :b_0_0) * (:a_0_0 - :b_0_0)) * (:a_0_0 - :b_0_0))']]]
Pre-condition:  (and (= 1 1) (= c1_0_1 (+ (- (- (* (* a_0_0 a_0_0) a_0_0) (* (* (* 3 a_0_0) a_0_0) b_0_0)) (* (* (* 3 a_0_0) b_0_0) b_0_0)) (* (* b_0_0 b_0_0) b_0_0))) (= c2_0_1 (* (* (- a_0_0 b_0_0) (- a_0_0 b_0_0)) (- a_0_0 b_0_0))) (= c1_0_1 c2_0_1) true)

Post-condition:  (= c1_0_1 c2_0_1)
Code-body:  (and (= c1_0_1 (+ (- (- (* (* a_0_0 a_0_0) a_0_0) (* (* (* 3 a_0_0) a_0_0) b_0_0)) (* (* (* 3 a_0_0) b_0_0) b_0_0)) (* (* b_0_0 b_0_0) b_0_0)))(= c2_0_1 (* (* (- a_0_0 b_0_0) (- a_0_0 b_0_0)) (- a_0_0 b_0_0)))true)

(declare-fun c2_0_1 () Int)
(declare-fun b_0_0 () Int)
(declare-fun a_0_0 () Int)
(declare-fun c1_0_1 () Int)
(assert (not (=> (and (and (= 1 1) (= c1_0_1 (+ (- (- (* (* a_0_0 a_0_0) a_0_0) (* (* (* 3 a_0_0) a_0_0) b_0_0)) (* (* (* 3 a_0_0) b_0_0) b_0_0)) (* (* b_0_0 b_0_0) b_0_0))) (= c2_0_1 (* (* (- a_0_0 b_0_0) (- a_0_0 b_0_0)) (- a_0_0 b_0_0))) (= c1_0_1 c2_0_1) true)
 (and (= c1_0_1 (+ (- (- (* (* a_0_0 a_0_0) a_0_0) (* (* (* 3 a_0_0) a_0_0) b_0_0)) (* (* (* 3 a_0_0) b_0_0) b_0_0)) (* (* b_0_0 b_0_0) b_0_0)))(= c2_0_1 (* (* (- a_0_0 b_0_0) (- a_0_0 b_0_0)) (- a_0_0 b_0_0)))true)
) (= c1_0_1 c2_0_1))))
(check-sat)
(get-model)


======Z3 Output:======
 unsat
(error "line 9 column 10: model is not available")

